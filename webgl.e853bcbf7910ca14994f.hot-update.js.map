{"version":3,"file":"webgl.e853bcbf7910ca14994f.hot-update.js","mappings":";;;;;;;;;;;;;;AAAsJ;;AAEtJ;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;AAEe;AACf;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,0CAAO,QAAQ,4CAAS,EAAE,sDAAmB,EAAE,sDAAmB,EAAE,+CAAY,EAAE,2DAAwB,EAAE,6CAAU,EAAE,mDAAgB,KAAK,iDAAc;AACjL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sBAAsB,0CAAO,QAAQ,4CAAS,EAAE,sDAAmB,EAAE,sDAAmB,EAAE,+CAAY,EAAE,2DAAwB,EAAE,6CAAU,EAAE,mDAAgB,KAAK,iDAAc;AACjL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;;;;;;;;;UC3IA","sources":["webpack://ResidenceMozart/./workers/tools/texture-generator.js","webpack://ResidenceMozart/webpack/runtime/getFullHash"],"sourcesContent":["import { Texture, UVMapping, ClampToEdgeWrapping, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, UnsignedByteType, LinearEncoding } from \"three\";\n\nconst SIZE = 1024;\nconst canvas = self.OffscreenCanvas ? new OffscreenCanvas(SIZE, SIZE) : document.createElement(\"canvas\");\n\nObject.assign(canvas, {\n\twidth: SIZE,\n\theight: SIZE\n});\n\nconst context = canvas.getContext(\"2d\");\n\nexport default class TextureGenerator {\n\tstatic toImage(){\n\n\t\tif( self instanceof WorkerGlobalScope ){\n\n\t\t\treturn canvas.transferToImageBitmap();\n\n\t\t}\n\t\telse {\n\n\t\t\tconsole.log(\"safari\");\n\n\t\t}\n\n\t}\n\tstatic async generatePrice([ imageAUrl, imageBUrl, imageCUrl ]){\n\n\t\tconst third = SIZE / 3;\n\n\t\tcontext.save();\n\t\tconst imageC = await TextureGenerator.loadImage(imageCUrl);\n\t\tcontext.fillStyle = \"#FFFFFF\";\n\t\tcontext.fillRect(0, 0, third, SIZE);\n\t\tcontext.fillStyle = \"#555555\";\n\t\tcontext.fillRect(third * 0.2, SIZE * 0.2, third * 0.6, SIZE * 0.6);\n\t\tcontext.translate(third * 0.2, SIZE * 0.2);\n\t\tcontext.rotate(Math.PI * 0.5);\n\t\tcontext.scale(1, -1);\n\t\tcontext.drawImage(imageC, 0, 0, SIZE * 0.6, third * 0.6);\n\t\tcontext.restore();\n\n\t\tcontext.save();\n\t\tconst imageB = await TextureGenerator.loadImage(imageBUrl);\n\t\tcontext.fillStyle = \"#FFFFFF\";\n\t\tcontext.fillRect(third, 0, third, SIZE);\n\t\tcontext.fillStyle = \"#555555\";\n\t\tcontext.fillRect(third + (third * 0.2), SIZE * 0.2, third * 0.6, SIZE * 0.6);\n\t\tcontext.translate(third + (third * 0.2), SIZE * 0.2);\n\t\tcontext.rotate(Math.PI * 0.5);\n\t\tcontext.scale(1, -1);\n\t\tcontext.drawImage(imageB, 0, 0, SIZE * 0.6, third * 0.6);\n\t\tcontext.restore();\n\n\t\tcontext.save();\n\t\tconst imageA = await TextureGenerator.loadImage(imageAUrl);\n\t\tcontext.fillStyle = \"#FFFFFF\";\n\t\tcontext.fillRect(third * 2, 0, third, SIZE);\n\t\tcontext.fillStyle = \"#555555\";\n\t\tcontext.fillRect((third * 2) + (third * 0.2), SIZE * 0.2, third * 0.6, SIZE * 0.6);\n\t\tcontext.translate((third * 2) + (third * 0.2), SIZE * 0.2);\n\t\tcontext.rotate(Math.PI * 0.5);\n\t\tcontext.scale(1, -1);\n\t\tcontext.drawImage(imageA, 0, 0, SIZE * 0.6, third * 0.6);\n\t\tcontext.restore();\n\n\t\tconst image = TextureGenerator.toImage();\n\n\t\tconst texture = new Texture(image, UVMapping, ClampToEdgeWrapping, ClampToEdgeWrapping, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, UnsignedByteType, 1, LinearEncoding);\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\tstatic generateBall( baseImage, number = 0, color = \"#000\" ){\n\n\t\tcontext.save();\n\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, SIZE, SIZE);\n\n\t\tcontext.drawImage(baseImage, 0, 0, SIZE, SIZE);\n\n\t\tcontext.font = \"bold 150px Helvetica\";\n\t\tcontext.fillStyle = \"#000000\";\n\t\tcontext.textAlign = \"center\";\n\t\tcontext.textBaseline = \"middle\";\n\t\tcontext.translate(SIZE / 2, SIZE / 2);\n\t\tcontext.scale(0.5, 1);\n\t\tcontext.fillText(number, 0, 0);\n\n\t\tcontext.restore();\n\n\t\tconst image = TextureGenerator.toImage();\n\n\t\tconst texture = new Texture(image, UVMapping, ClampToEdgeWrapping, ClampToEdgeWrapping, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, UnsignedByteType, 1, LinearEncoding);\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\tstatic async loadImage( url ){\n\n\t\tif( createImageBitmap instanceof Function ){\n\n\t\t\treturn fetch(url).then(response => response.blob()).then(( blob )=>{\n\n\t\t\t\treturn createImageBitmap(blob, {\n\t\t\t\t\tpremultiplyAlpha: \"none\",\n\t\t\t\t\tcolorSpaceConversion: \"none\"\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t}\n\t\telse {\n\n\t\t\treturn new Promise(( resolve )=>{\n\n\t\t\t\tconst image = new Image();\n\n\t\t\t\tfunction onLoad(){\n\n\t\t\t\t\timage.removeEventListener(\"load\", onLoad);\n\n\t\t\t\t\tresolve(image);\n\n\t\t\t\t};\n\n\t\t\t\timage.addEventListener(\"load\", onLoad);\n\n\t\t\t\timage.src = url;\n\n\t\t\t});\n\n\t\t}\n\n\t}\n}\n","__webpack_require__.h = () => (\"5efb055b0e8bca3abcba\")"],"names":[],"sourceRoot":""}